in tif_predict.C

278 TIFF_NOSANITIZE_UNSIGNED_INT_OVERFLOW
279 static int
280 horAcc8(TIFF* tif, uint8* cp0, tmsize_t cc)
281 {
282     tmsize_t stride = PredictorState(tif)->stride;
283 
284     unsigned char* cp = (unsigned char*) cp0;
285 #ifdef MAGMA_ENABLE_FIXES
286     if((cc%stride)!=0)
287     {
288         TIFFErrorExt(tif->tif_clientdata, "horAcc8",
289                      "%s", "(cc%stride)!=0");
290         return 0;
291     }
292 #endif
293 
294     if (cc > stride) {
295             /*
296              * Pipeline the most common cases.
297              */
298             if (stride == 3)  {
299                     unsigned int cr = cp[0];
300                     unsigned int cg = cp[1];
301                     unsigned int cb = cp[2];
302                     cc -= 3;
303                     cp += 3;
304                     while (cc>0) {
305                             cp[0] = (unsigned char) ((cr += cp[0]) & 0xff);
306                             cp[1] = (unsigned char) ((cg += cp[1]) & 0xff);
307                             cp[2] = (unsigned char) ((cb += cp[2]) & 0xff);
308                             cc -= 3;
309                             cp += 3;
310                     }
311             } else if (stride == 4)  {
312                     unsigned int cr = cp[0];
313                     unsigned int cg = cp[1];
314                     unsigned int cb = cp[2];
315                     unsigned int ca = cp[3];
316                     cc -= 4;
317                     cp += 4;
318                     while (cc>0) {
319                             cp[0] = (unsigned char) ((cr += cp[0]) & 0xff);
320                             cp[1] = (unsigned char) ((cg += cp[1]) & 0xff);
321                             cp[2] = (unsigned char) ((cb += cp[2]) & 0xff);
322                             cp[3] = (unsigned char) ((ca += cp[3]) & 0xff);
323                             cc -= 4;
324                             cp += 4;
325                     }
326             } else  {
327                     cc -= stride;
328                     do {
329                             REPEAT4(stride, cp[stride] =
330                                     (unsigned char) ((cp[stride] + *cp) & 0xff); cp++)
331                             cc -= stride;
332                     } while (cc>0);
333             }
334     }
335     return 1;
336 }