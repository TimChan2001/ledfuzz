Vulnerability Type: heap-buffer-overflow
Crash/Trigger Point(s): in XRef::getEntry(int, bool) XRef.cc:1615:33
Bug Call Trace:
    ==156095==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62e00000018c at pc 0x00000080f912 bp 0x7ffec9277fd0 sp 0x7ffec9277fc8
    READ of size 4 at 0x62e00000018c thread T0
        #0 0x80f911 in XRef::getEntry(int, bool) /magma/targets/poppler/repo/poppler/XRef.cc:1615:33
        #1 0x704e5e in Parser::makeStream(Object&&, unsigned char const*, CryptAlgorithm, int, int, int, int, bool) /magma/targets/poppler/repo/poppler/Parser.cc:211:34
        #2 0x703dba in Parser::getObj(bool, unsigned char const*, CryptAlgorithm, int, int, int, int, bool) /magma/targets/poppler/repo/poppler/Parser.cc:141:40
        #3 0xaf4a2e in Hints::readTables(BaseStream*, Linearization*, XRef*, SecurityHandler*) /magma/targets/poppler/repo/poppler/Hints.cc:211:27
        #4 0x710257 in PDFDoc::checkLinearization() /magma/targets/poppler/repo/poppler/PDFDoc.cc:691:21
        #5 0x70f41d in PDFDoc::getPage(int) /magma/targets/poppler/repo/poppler/PDFDoc.cc:2083:27
        #6 0x70fbc6 in PDFDoc::displayPageSlice(OutputDev*, int, double, double, int, bool, bool, bool, int, int, int, int, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool) /magma/targets/poppler/repo/poppler/PDFDoc.cc:654:9
        #7 0x506821 in poppler::page_renderer::render_page(poppler::page const*, double, double, int, int, int, int, poppler::rotation_enum) const /magma/targets/poppler/repo/cpp/poppler-page-renderer.cpp:284:13
        #8 0x4cbd26 in LLVMFuzzerTestOneInput /magma/targets/poppler/src/pdf_fuzzer.cc:43:7
        #9 0xdc1ea3 in main /magma/fuzzers/afl_asan/repo/afl_driver.cpp:201:7
        #10 0x7f6fdd7abc86 in __libc_start_main /build/glibc-CVJwZb/glibc-2.27/csu/../csu/libc-start.c:310
        #11 0x4219d9 in _start (/magma_out/pdf_fuzzer+0x4219d9)

    0x62e00000018c is located 628 bytes to the left of 40960-byte region [0x62e000000400,0x62e00000a400)
    allocated by thread T0 here:
        #0 0x4998dd in malloc (/magma_out/pdf_fuzzer+0x4998dd)
        #1 0x52e76a in grealloc(void*, unsigned long, bool) /magma/targets/poppler/repo/goo/gmem.h:75:47

    SUMMARY: AddressSanitizer: heap-buffer-overflow /magma/targets/poppler/repo/poppler/XRef.cc:1624:33 in XRef::getEntry(int, bool)
    Shadow bytes around the buggy address:
    0x0c5c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x0c5c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x0c5c7fff8000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    =>0x0c5c7fff8030: fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c5c7fff8080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    Shadow byte legend (one shadow byte represents 8 application bytes):
    Addressable:           00
    Partially addressable: 01 02 03 04 05 06 07 
    Heap left redzone:       fa
    Freed heap region:       fd
    Stack left redzone:      f1
    Stack mid redzone:       f2
    Stack right redzone:     f3
    Stack after return:      f5
    Stack use after scope:   f8
    Global redzone:          f9
    Global init order:       f6
    Poisoned by user:        f7
    Container overflow:      fc
    Array cookie:            ac
    Intra object redzone:    bb
    ASan internal:           fe
    Left alloca redzone:     ca
    Right alloca redzone:    cb
    Shadow gap:              cc
    ==156095==ABORTING

Patch:
    diff --git a/poppler/XRef.cc b/poppler/XRef.cc
    index 8f9dd7fe..84fac3fb 100644
    --- a/poppler/XRef.cc
    +++ b/poppler/XRef.cc
    @@ ... @@ DummyXRefEntry dummyXRefEntry;
    
    XRefEntry *XRef::getEntry(int i, bool complainIfMissing)
    {
    +#ifdef MAGMA_ENABLE_FIXES
        if (unlikely(i < 0)) {
            error(errInternal, -1, "Request for invalid XRef entry [{0:d}]", i);
            return &dummyXRefEntry;
        }
    -
    +#endif
        if (i >= size || entries[i].type == xrefEntryNone) {
    
            if ((!xRefStream) && mainXRefEntriesOffset) {
