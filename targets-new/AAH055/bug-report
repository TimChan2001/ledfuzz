Vulnerability Type: heap-buffer-overflow
Crash/Trigger Point(s): in i2c_ibuf a_int.c:158
Bug Call Trace:
    ==176182==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000020daf at pc 0x000000b87e77 bp 0x7ffc4b7212a0 sp 0x7ffc4b721298
    READ of size 1 at 0x602000020daf thread T0
        #0 0xb87e76 in i2c_ibuf /magma/targets/openssl/repo/crypto/asn1/a_int.c:158:17
        #1 0x699d68 in asn1_ex_i2c /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:577:16
        #2 0x6990bc in asn1_i2d_ex_primitive /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:481:9
        #3 0x6960d0 in ASN1_item_ex_i2d /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:109:16
        #4 0x6973c9 in asn1_template_ex_i2d /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:347:12
        #5 0x6968f3 in ASN1_item_ex_i2d /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:185:13
        #6 0x697fd2 in asn1_set_seq_out /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:412:24
        #7 0x697fd2 in asn1_template_ex_i2d /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c:317:9
        #8 0x695e89 in ASN1_item_ex_i2d /magma/targets/openssl/repo/crypto/asn1/tasn_enc.c
        #9 0xa09696 in i2d_name_canon /magma/targets/openssl/repo/crypto/x509/x_name.c:476:16
        #10 0xa08cf7 in x509_name_canon /magma/targets/openssl/repo/crypto/x509/x_name.c:369:5
        #11 0xa065e6 in x509_name_ex_d2i /magma/targets/openssl/repo/crypto/x509/x_name.c:192:11
        #12 0x68b802 in asn1_item_embed_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:216:16
        #13 0x693042 in asn1_template_noexp_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:625:15
        #14 0x68e340 in asn1_template_ex_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:476:15
        #15 0x68bacd in asn1_item_embed_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:241:19
        #16 0x68a74c in ASN1_item_ex_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:124:10
        #17 0x68a74c in ASN1_item_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:114:9
        #18 0x5c3825 in tls_parse_ctos_status_request /magma/targets/openssl/repo/ssl/statem/extensions_srvr.c:414:14
        #19 0x59e694 in tls_parse_extension /magma/targets/openssl/repo/ssl/statem/extensions.c:714:20
        #20 0x59ea39 in tls_parse_all_extensions /magma/targets/openssl/repo/ssl/statem/extensions.c:747:14
        #21 0x64c245 in tls_early_post_process_client_hello /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:1917:10
        #22 0x64c245 in tls_post_process_client_hello /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:2260:18
        #23 0x647dcb in ossl_statem_server_post_process_message /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:1252:16
        #24 0x5d9976 in read_state_machine /magma/targets/openssl/repo/ssl/statem/statem.c:670:35
        #25 0x5d9976 in state_machine /magma/targets/openssl/repo/ssl/statem/statem.c:435:21
        #26 0x504f53 in SSL_do_handshake /magma/targets/openssl/repo/ssl/ssl_lib.c:3862:19
        #27 0x4c76ba in FuzzerTestOneInput /magma/targets/openssl/repo/fuzz/server.c:632:9
        #28 0xe22013 in main /magma/fuzzers/afl_asan/repo/afl_driver.cpp:201:7
        #29 0x7f2a00b04c86 in __libc_start_main /build/glibc-CVJwZb/glibc-2.27/csu/../csu/libc-start.c:310
        #30 0x41c809 in _start (/magma_out/server+0x41c809)

    0x602000020daf is located 1 bytes to the left of 2-byte region [0x602000020db0,0x602000020db2)
    allocated by thread T0 here:
        #0 0x49470d in malloc (/magma_out/server+0x49470d)
        #1 0x881c10 in CRYPTO_malloc /magma/targets/openssl/repo/crypto/mem.c:184:12
        #2 0x881efb in CRYPTO_realloc /magma/targets/openssl/repo/crypto/mem.c:207:16
        #3 0x685e08 in ASN1_STRING_set /magma/targets/openssl/repo/crypto/asn1/asn1_lib.c:302:21
        #4 0x6859b2 in ASN1_STRING_copy /magma/targets/openssl/repo/crypto/asn1/asn1_lib.c:254:10
        #5 0xa0832e in asn1_string_canon /magma/targets/openssl/repo/crypto/x509/x_name.c:394:14
        #6 0xa0832e in x509_name_canon /magma/targets/openssl/repo/crypto/x509/x_name.c:346:14
        #7 0xa065e6 in x509_name_ex_d2i /magma/targets/openssl/repo/crypto/x509/x_name.c:192:11
        #8 0x68b802 in asn1_item_embed_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:216:16
        #9 0x693042 in asn1_template_noexp_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:625:15
        #10 0x68e340 in asn1_template_ex_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:476:15
        #11 0x68bacd in asn1_item_embed_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:241:19
        #12 0x68a74c in ASN1_item_ex_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:124:10
        #13 0x68a74c in ASN1_item_d2i /magma/targets/openssl/repo/crypto/asn1/tasn_dec.c:114:9
        #14 0x5c3825 in tls_parse_ctos_status_request /magma/targets/openssl/repo/ssl/statem/extensions_srvr.c:414:14
        #15 0x59e694 in tls_parse_extension /magma/targets/openssl/repo/ssl/statem/extensions.c:714:20
        #16 0x59ea39 in tls_parse_all_extensions /magma/targets/openssl/repo/ssl/statem/extensions.c:747:14
        #17 0x64c245 in tls_early_post_process_client_hello /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:1917:10
        #18 0x64c245 in tls_post_process_client_hello /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:2260:18
        #19 0x647dcb in ossl_statem_server_post_process_message /magma/targets/openssl/repo/ssl/statem/statem_srvr.c:1252:16
        #20 0x5d9976 in read_state_machine /magma/targets/openssl/repo/ssl/statem/statem.c:670:35
        #21 0x5d9976 in state_machine /magma/targets/openssl/repo/ssl/statem/statem.c:435:21
        #22 0x504f53 in SSL_do_handshake /magma/targets/openssl/repo/ssl/ssl_lib.c:3862:19
        #23 0x4c76ba in FuzzerTestOneInput /magma/targets/openssl/repo/fuzz/server.c:632:9
        #24 0xe22013 in main /magma/fuzzers/afl_asan/repo/afl_driver.cpp:201:7
        #25 0x7f2a00b04c86 in __libc_start_main /build/glibc-CVJwZb/glibc-2.27/csu/../csu/libc-start.c:310

    SUMMARY: AddressSanitizer: heap-buffer-overflow /magma/targets/openssl/repo/crypto/asn1/a_int.c:158:17 in i2c_ibuf
    Shadow bytes around the buggy address:
    0x0c047fffc160: fa fa 05 fa fa fa 00 05 fa fa 00 06 fa fa fd fa
    0x0c047fffc170: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fa
    0x0c047fffc180: fa fa 00 00 fa fa 00 02 fa fa 00 00 fa fa 00 00
    0x0c047fffc190: fa fa 00 00 fa fa 02 fa fa fa 05 fa fa fa 00 00
    0x0c047fffc1a0: fa fa 01 fa fa fa 02 fa fa fa 01 fa fa fa 04 fa
    =>0x0c047fffc1b0: fa fa 01 fa fa[fa]02 fa fa fa 01 fa fa fa 06 fa
    0x0c047fffc1c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c047fffc1d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c047fffc1e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c047fffc1f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    0x0c047fffc200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    Shadow byte legend (one shadow byte represents 8 application bytes):
    Addressable:           00
    Partially addressable: 01 02 03 04 05 06 07 
    Heap left redzone:       fa
    Freed heap region:       fd
    Stack left redzone:      f1
    Stack mid redzone:       f2
    Stack right redzone:     f3
    Stack after return:      f5
    Stack use after scope:   f8
    Global redzone:          f9
    Global init order:       f6
    Poisoned by user:        f7
    Container overflow:      fc
    Array cookie:            ac
    Intra object redzone:    bb
    ASan internal:           fe
    Left alloca redzone:     ca
    Right alloca redzone:    cb
    Shadow gap:              cc
    ==176182==ABORTING

Patch:
    --- a/crypto/asn1/a_int.c
    +++ b/crypto/asn1/a_int.c
    @@ ... @@ static size_t i2c_ibuf(const unsigned char *b, size_t blen, int neg,
        *p = pb;
        p += pad;       /* yes, p[0] can be written twice, but it's little
                        * price to pay for eliminated branches */
    +#ifdef MAGMA_ENABLE_FIXES
        twos_complement(p, b, blen, pb);
    +#else
    +    if (blen == 0)
    +        *(p++) = 0;
    +    else if (!neg)
    +        memcpy(p, b, (unsigned int)blen);
    +    else {
    +        /* Begin at the end of the encoding */
    +        const unsigned char *n = b + blen - 1;
    +        p += blen - 1;
    +        i = blen;
    +
    +        /**
    +         * The representation of a negative zero is just all zeros. This routine
    +         * tries to optimize 2's complement by skipping all trailing zeros,
    +         * since trailing zeros are convserved by 2's complement. However, a
    +         * negative zero number is all trailing zeros. Thus, the routine will
    +         * underflow trying to skip them.
    +         */
    +
    +        /* Copy zeros to destination as long as source is zero */
    +        while (!*n) {
    +            *(p--) = 0;
    +            n--;
    +            i--;
    +        }
    +        /* Complement and increment next octet */
    +        *(p--) = ((*(n--)) ^ 0xff) + 1;
    +        i--;
    +        /* Complement any octets left */
    +        for (; i > 0; i--)
    +            *(p--) = *(n--) ^ 0xff;
    +    }
    +#endif
    
        *pp += ret;
        return ret;
    diff --git a/crypto/asn1/a_type.c b/crypto/asn1/a_type.c
    index 3a75385a25..2eb3facac0 100644
    --- a/crypto/asn1/a_type.c
    +++ b/crypto/asn1/a_type.c
    @@ -77,6 +77,10 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
        case V_ASN1_NULL:
            result = 0;             /* They do not have content. */
            break;
    +#ifndef MAGMA_ENABLE_FIXES
    +    case V_ASN1_NEG_INTEGER:
    +    case V_ASN1_NEG_ENUMERATED:
    +#endif
        case V_ASN1_INTEGER:
        case V_ASN1_ENUMERATED:
        case V_ASN1_BIT_STRING:
    diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
    index f720c6020a..99cf128130 100644
    --- a/crypto/asn1/tasn_dec.c
    +++ b/crypto/asn1/tasn_dec.c
    @@ -832,6 +832,10 @@ static int asn1_ex_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
                goto err;
            break;
    
    +#ifndef MAGMA_ENABLE_FIXES
    +    case V_ASN1_NEG_INTEGER:
    +    case V_ASN1_NEG_ENUMERATED:
    +#endif
        case V_ASN1_INTEGER:
        case V_ASN1_ENUMERATED:
            tint = (ASN1_INTEGER **)pval;
    diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
    index d8abd81698..fa0392baa9 100644
    --- a/crypto/asn1/tasn_enc.c
    +++ b/crypto/asn1/tasn_enc.c
    @@ -565,6 +565,10 @@ static int asn1_ex_i2c(const ASN1_VALUE **pval, unsigned char *cout, int *putype
            return i2c_ASN1_BIT_STRING((ASN1_BIT_STRING *)*pval,
                                        cout ? &cout : NULL);
    
    +#ifndef MAGMA_ENABLE_FIXES
    +    case V_ASN1_NEG_INTEGER:
    +    case V_ASN1_NEG_ENUMERATED:
    +#endif
        case V_ASN1_INTEGER:
        case V_ASN1_ENUMERATED:
            /*
